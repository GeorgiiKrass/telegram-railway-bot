from datetime import datetime
import logging
import os
import json
import uuid
import dateparser
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

BOT_TOKEN = os.getenv("TOKEN")
NOTES_FILE = "notes.txt"
REMINDERS_FILE = "reminders.json"

logging.basicConfig(level=logging.INFO)
scheduler = BackgroundScheduler()
scheduler.start()
print("üì¢ Scheduler started")

def load_notes():
    try:
        with open(NOTES_FILE, "r", encoding="utf-8") as f:
            return f.readlines()
    except FileNotFoundError:
        return []

def save_note(text):
    with open(NOTES_FILE, "a", encoding="utf-8") as f:
        f.write(text + "\n")

def load_reminders():
    if not os.path.exists(REMINDERS_FILE):
        return []
    with open(REMINDERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_reminders(reminders):
    with open(REMINDERS_FILE, "w", encoding="utf-8") as f:
        json.dump(reminders, f, indent=2, ensure_ascii=False)

def schedule_reminder(application, chat_id, text, when_str, reminder_id):
    try:
        parsed_time = dateparser.parse(
            when_str,
            languages=["ru"],
            settings={"TIMEZONE": "Europe/Kyiv", "RETURN_AS_TIMEZONE_AWARE": True}
        )
        if not parsed_time:
            print("‚ö†Ô∏è –í—Ä–µ–º—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", when_str)
            return False

        print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ {parsed_time} | –¢–µ–∫—Å—Ç: {text} | ID: {reminder_id}")

        scheduler.add_job(
            lambda: send_reminder(application, chat_id, text, reminder_id),
            trigger='date',
            run_date=parsed_time,
            id=reminder_id,
            replace_existing=True
        )
        return parsed_time.strftime("%Y-%m-%d %H:%M")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

def send_reminder(application, chat_id, text, reminder_id):
    print(f"üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text} | ID: {reminder_id}")
    application.bot.send_message(chat_id=chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É –∏–ª–∏: –Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É - –ø—Ä–∏–º–µ—Ä")

async def handle_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower().startswith("–Ω–∞–ø–æ–º–Ω–∏ "):
        parts = text.split("-")
        if len(parts) == 2:
            when_str = parts[0].replace("–Ω–∞–ø–æ–º–Ω–∏", "").strip()
            reminder_text = parts[1].strip()
            chat_id = update.message.chat_id
            reminder_id = str(uuid.uuid4())

            reminder_time = schedule_reminder(context.application, chat_id, reminder_text, when_str, reminder_id)
            if reminder_time:
                reminder = {
                    "id": reminder_id,
                    "chat_id": chat_id,
                    "text": reminder_text,
                    "when": when_str,
                    "datetime": reminder_time
                }
                reminders = load_reminders()
                reminders.append(reminder)
                save_reminders(reminders)

                await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {when_str}")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: –Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É - —Ç–µ–∫—Å—Ç")
    else:
        save_note(text)
        await update.message.reply_text("üíæ –ó–∞–ø–∏—Å–∞–ª!")

async def show_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reminders = load_reminders()
    user_reminders = [r for r in reminders if r["chat_id"] == update.message.chat_id]
    if not user_reminders:
        await update.message.reply_text("üîï –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    for r in user_reminders:
        text = f"‚è≥ {r['datetime']} ‚Äî {r['text']}"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{r['id']}"),
             InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{r['id']}")]
        ])
        await update.message.reply_text(text, reply_markup=keyboard)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    action, reminder_id = data.split(":")
    reminders = load_reminders()
    updated_reminders = [r for r in reminders if r["id"] != reminder_id]
    save_reminders(updated_reminders)

    if action == "delete":
        await query.edit_message_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    elif action == "done":
        await query.edit_message_text("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reminders", show_reminders))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_note))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
