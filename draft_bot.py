import os
import logging
import uuid
import json
import dateparser
from datetime import datetime
from telegram import Update, Voice
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pydub import AudioSegment
import speech_recognition as sr

BOT_TOKEN = os.getenv("TOKEN")
AUDIO_DIR = "audio_notes"
REMINDERS_FILE = "reminders.json"

os.makedirs(AUDIO_DIR, exist_ok=True)
scheduler = AsyncIOScheduler()
logging.basicConfig(level=logging.INFO)

def save_reminder(r):
    if not os.path.exists(REMINDERS_FILE):
        data = []
    else:
        with open(REMINDERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    data.append(r)
    with open(REMINDERS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def extract_time_and_text(text):
    original = text.lower().replace("–Ω–∞–ø–æ–º–Ω–∏", "").strip()
    normalized = original.replace("‚Äî", " ").replace("‚Äì", " ").replace("-", " ")
    print(f"üéô –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
    print(f"üõ† –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {normalized}")
    
    words = normalized.split()
    for i in range(2, len(words)):
        time_candidate = " ".join(words[:i])
        text_candidate = " ".join(words[i:])
        print(f"üîç –ü—Ä–æ–±—É–µ–º –≤—Ä–µ–º—è: {time_candidate} | —Ç–µ–∫—Å—Ç: {text_candidate}")
        parsed = dateparser.parse(
            time_candidate,
            languages=["ru"],
            settings={
                "PREFER_DATES_FROM": "future",
                "RETURN_AS_TIMEZONE_AWARE": True,
                "RELATIVE_BASE": datetime.now()
            }
        )
        if parsed:
            print(f"‚úÖ –£—Å–ø–µ—Ö: {parsed}")
            return time_candidate, text_candidate
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω—É –∫–æ–º–±–∏–Ω–∞—Ü–∏—é")
    return None, None

def schedule(application, chat_id, text, when_str):
    print(f"üß† –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: {when_str}")
    dt = dateparser.parse(
        when_str,
        languages=["ru"],
        settings={
            "PREFER_DATES_FROM": "future",
            "RETURN_AS_TIMEZONE_AWARE": True,
            "RELATIVE_BASE": datetime.now()
        }
    )
    if dt:
        print(f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤: {dt}")
        scheduler.add_job(
            lambda: application.bot.send_message(chat_id=chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}"),
            trigger='date',
            run_date=dt
        )
        r = {"chat_id": chat_id, "text": text, "datetime": dt.strftime("%Y-%m-%d %H:%M")}
        save_reminder(r)
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É.")
        return False

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice: Voice = update.message.voice
    file = await context.bot.get_file(voice.file_id)
    ogg = f"{AUDIO_DIR}/{voice.file_id}.ogg"
    wav = f"{AUDIO_DIR}/{voice.file_id}.wav"
    await file.download_to_drive(ogg)

    try:
        sound = AudioSegment.from_file(ogg)
        sound.export(wav, format="wav")
        recog = sr.Recognizer()
        with sr.AudioFile(wav) as source:
            audio = recog.record(source)
            text = recog.recognize_google(audio, language="ru-RU")
        print(f"üéô –¢–µ–∫—Å—Ç: {text}")
        if "–Ω–∞–ø–æ–º–Ω–∏" in text.lower():
            when, body = extract_time_and_text(text)
            if when and body:
                if schedule(context.application, update.message.chat_id, body, when):
                    await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    return
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è.")
        else:
            await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–ª –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É: {text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    scheduler.start()
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.run_polling()
